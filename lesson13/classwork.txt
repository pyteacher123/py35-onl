ЗАДАНИЕ 1
Создать класс Rectangle, который при инициализации принимает кортеж: 
(side_a, side_b, side_c, side_d), которые можно ассоциировать с
сторонами прямоугольника
У класса реализовать метод
perimetr(self) - возвращает периметр прямоугольника (число)
А также между объектами этого класса должны поддерживаться операции
>, <, >=, <=, ==, !=

Пример программы:
r1 = Rectangle((2, 4, 2, 4))
r2 = Rectangle((1, 5, 1, 5))
r1 == r2 # True, так как одинаковый периметр
r3 = Rectangle((5, 10, 5, 10))
r3 > r1 # True, так как длина r3 больше, чем длина r1


ЗАДАНИЕ 2
Создать класс Song, которая будет хранить следующие свойства:
name - название песни
length - длительность
number_of_listens - количество прослушиваний (изначально 0)

У объектов класса должны быть следующие методы:
listen(self) - увеличивает количество прослушиваний на единицу
А также между объектами этого класса должны поддерживаться операции
>, < - сравнивать длительность песни
==, != - сравнивать длительность и название

Создать класс Album, который будет хранить следующие свойства
name - название альбома
genre - жанр
author - автор
songs - список песен из альбома, изначально пустой

У класса Album должны быть следущие методы:
append(self, song) - добавляет песню в альбом
remove(self, song) - удаляет песню из альбома
get_info(self) - возвращает информацию об альбоме в виде словаря
sort(self) - возвращает информацию обо всех песнях альбома, в порядке наибольшего количества
прослушиваний
Также объекты класса должны поддерживать операцию len()
len(album) # возвращает количество песен в альбоме
А также чтобы альбом можно было использовать в операторе for in
for song in album:
    print(song) # печатает информацию о каждой песне



ЗАДАНИЕ 3
Создайте класс Student, содержащий поля: фамилия и имя, номер группы, 
успеваемость (массив из пяти элементов, каждый элемент число от 1 до 10). 
Проверить что фамилия и имя строки через property. Если не строка, 
вызываем ошибку ValidationError.

Создать класс School, содержащий список учеников (изначально пустой):

Добавить возможно для добавления студентов в школу (метод add_student)
Добавить возможность вывода фамилий и номеров групп студентов, имеющих оценки, 
равные только 5 или 6. Метод (get_best_students) 
Добавить возможность вывода учеников заданной группы (get_students(self, group_number))
Добавить возможность вывода учеников претендующих на автомат(средний балл >= 7) 
Метод (get_students_without_exams)


ЗАДАНИЕ 4
Создать класс LinkedList, который будет являться структурой данных "связанный список"
У класса LinkedList должно быть свойство head (при инициализации None), которое является
ссылкой на первый объект в списке.
Также класс LinkedList должен иметь методы:
1. append(self, element) - добавляет новый элемент в LinkedList
2. println(self) - выводит на экран список из всех значений атрибута data для каждого элемента
в порядке того, как эти элименты стоят в списке

Также создать класс Element, у которого должны быть два свойства next (при инициализации None)
и data, которое задаётся при инициализации и хранит объект класса int.


Пример использования программы
linked_lst = LinkedList() # coздаётся объект класса 
linked_lst.append(Element(1)) # добавляем первый элемент
linked_lst.append(Element(2)) # добавляем второй элемент
linked_lst.append(Element(3)) # добавляем третий элемент
linked_lst.println() # выведет: [1, 2, 3]
linked_lst.reverse() # перевернёт список
linked_lst.println() # выведет [3, 2, 1]