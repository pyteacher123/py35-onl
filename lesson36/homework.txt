ЗАДАНИЕ 1

Добавить в jobboard_app первое Django-приложение (manage.py startapp core). 
В это приложение добавить обработчики (контроллеры, views) для следующих url:

1. http://127.0.0.1:8000/ - index page. При отправке GET запроса на этот url приложение должно
возвращать главную (index) html-страницу. На ней должен располагаться nav bar с гиперссылками на 
другие разделы сайта (главная, добавить вакансию, список компаний) 
и таблица со списком вакансий (название должности, название компании, уровень (junior, middle, senior),
минимальный опыт (например: 3+ years), вилка ЗП (например: 2000 - 3000 USD)). 
Оформлять страницу с помощью css необязательно, достаточно просто добавить нужные тэги.
Добавлять БД на данном этапе необязательно, достаточно сохранять вакансии в памяти (например создать
класс VacanciesStorage и dataclass Vacancy).

ВАЖНО: этот url должен поддерживать только GET method, при попытке отправить запрос с помощью другого метода
должна возвращаться ошибка.

2. http://127.0.0.1:8000/add/ - при отправке GET запроса на этот url должна возвращаться html-страница,
состоящая из nav bar (такой же как и на index page) и html-формы для отправки данных на сервер.
Html-форма должна состоять из следующих полей: название должности, название компании, уровень (junior, middle, senior),
минимальный опыт (например: 3+ years), вилка ЗП (например: 2000 - 3000 USD).

Отправка формы должна осуществляться методом POST на этот же url /add/. И при получении данных в контроллере нужно
сохранить эти данные с помощью класса-хранилиша (VacanciesStorage).

ВАЖНО: этот url должен поддерживать только методы GET и POST.

3. http://127.0.0.1:8000/companies/ - При отправке GET запроса должна возвращаться html страница, состоящая из
nav bar (аналогичный index page) и таблица состоящая из названия компании и количества открытых вакансий в ней.

ВАЖНО: этот url должен поддерживать только GET method

Примечание: реализовать на данном этапе постоянное хранение информации не нужно. Для хранения всех необходимых данных
используйте просто оперативную память (да, все данные будут стираться после перезагрузки сервера), но сейчас можно 
абстрагироваться от работы с хранилищем и сконцентрироваться только на изучении того, какие есть возможности в 
Django для работы с сетью и обработки http-запросов.
