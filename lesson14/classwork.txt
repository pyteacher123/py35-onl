ЗАДАНИЕ 1
Написать класс Fibonacci, который принимает индекс в последовательности Фибоначчи. 
Объекты класса должны быть итерируемыми и возвращать одно число из последовательности до тех
пор пока индекс не станет больше, того, который был передан на входе


ЗАДАНИЕ 1_1
Создать декоратор, который замеряет время работы кода. Декоратор реализовать ввиде
класса.


ЗАДАНИЕ 2
Реализовать классы Circle - принимает объект класса Point и radius,
Rectangle - принимает 4 объекта класса Point. 
Класс Point - принимает две координаты x и y
Сделать валидацию, что координаты класса Point больше 0.


ЗАДАНИЕ 2_1
Добавить класс Sphere, который принимает объект класса Point3D и radius
Класс Point3D принимает три координаты x, y и z 
Сделать валидацию, что координаты x, y, z ,больше 0


ЗАДАНИЕ 2_3
В класс Sphere, Circle, Rectangle добавить методы для высчета площади (4*pi*r^2)


ЗАДАНИЕ 3
Создайте класс Student, содержащий поля: фамилия и имя, номер группы, 
успеваемость (массив из пяти элементов, каждый элемент число от 1 до 10). 
Проверить что фамилия и имя строки состоящие только из латинских букв 
через property. Если не строка, 
вызываем ошибку ValidationError.

Создать класс School, содержащий список учеников (изначально пустой):

Добавить возможно для добавления студентов в школу (метод add_student)
Добавить возможность вывода фамилий и номеров групп студентов, имеющих оценки, 
равные только 5 или 6. Метод (get_best_students) 
Добавить возможность вывода учеников заданной группы (get_students(self, group_number))
Добавить возможность вывода учеников претендующих на автомат(средний балл >= 7) 
Метод (get_students_without_exams)


ЗАДАНИЕ 4
Создать класс LinkedList, который будет являться структурой данных "связанный список"
У класса LinkedList должно быть свойство head (при инициализации None), которое является
ссылкой на первый объект в списке.
Также класс LinkedList должен иметь методы:
1. append(self, element) - добавляет новый элемент в LinkedList
2. println(self) - выводит на экран список из всех значений атрибута data для каждого элемента
в порядке того, как эти элименты стоят в списке

Также создать класс Element, у которого должны быть два свойства next (при инициализации None)
и data, которое задаётся при инициализации и хранит объект класса int.


Пример использования программы
linked_lst = LinkedList() # coздаётся объект класса 
linked_lst.append(Element(1)) # добавляем первый элемент
linked_lst.append(Element(2)) # добавляем второй элемент
linked_lst.append(Element(3)) # добавляем третий элемент
linked_lst.println() # выведет: [1, 2, 3]