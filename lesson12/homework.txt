ЗАДАНИЕ 1
Создать класс Vector, который при инициализации принимает два значения-кортежа: 
(point_x1, point_y1) и (point_x2, point_y2), которые можно ассоциировать с 
координатами точек, которые образуют отрезок (вектор)
У класса реализовать метод
length(self) - возвращает длину вектора (число)
А также между объектами этого класса должны поддерживаться операции
>, <, >=, <=, ==, !=

Пример программы:
v1 = Vector((0, 0), (0, 1))
v2 = Vector((1, 1), (1, 2))
v1 == v2 # True, так как одинаковая длина
v3 = Vector((1, 1), (2, 2))
v3 > v1 # True, так как длина v3 больше, чем длина v1


ЗАДАНИЕ 2
Создать класс книга Book, который будет хранить следующую информацию о книге:
name - название
description - краткое описание
pages - количество страниц
author - автор
price - цена

Также у класса должны быть методы:
to_dict(self) - возвращает информацию о книге в виде словаря
contains_word(self, word) - возвращает True, если в названии или описании есть
переданное слово
Также А также между объектами этого класса должны поддерживаться операции
>, <, >=, <=, которые сравнивают книги по количеству страниц
==, != - сранивают совпадает ли вся информация у двух книга

Также создать класс Library, который будет иметь свойство books - при инициализации
пустой список. 
Также добавить методы 
add_book(self, book) # добавляет книгу в свойство books
get_books(self) # возвращает списко с информацией о всех книгах,
каждая информация о книге должна быть в виде словаря
remove_book(self, book) - удаляет книгу по значнию из свойства books
find_the_biggest_book(self) - возвращает книгу, в которой больше всего страниц,
если книг нет, то вызывает ошибку EmptyLibraryError
Также класс библиотека должен поддерживать метод len(), который будет возвращать 
количество книг в библиотеке

ПРИМЕР:
book1 = Book("1984", "Some description", 500, "Orwell", 10)
book2 = Book("Learn Python", "This book will teach you how to learn python", 1000, "Luhts", 49)

book1.to_dict() # Вернёт словарь
                # {"name": "1984", "description": "Some description", ...}
book1 == book2 # False, так как все данные о книгах разные
lib = Library()
lib.add_book(book1)
lib.add_book(book2)
lib.get_books() # вернёт информацию о книгах book1, book2, так как мы их добавили в бибилиотеку ранее
lib.find_the_biggest_book() # вернёт book2, так как в ней больше страниц
print(len(lib)) # должно напечатать 2, так как в бибилиотеки 2 книги
