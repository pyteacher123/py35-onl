ЗАДАЧА 1
Реализовать библиотеку cache_lib, которая должна предоставлять декоратор cached для кэширования функций в других программах.
Например использоваться так:
from cache_lib import cached, SimpleCache, FIFOCache, LRUCache, TTLCache


@cached(cache=SimpleCache())
def test(num):
    time.sleep(1)
    return num ** 2


@cached(cache=LRUCache(max_size=128))
def test2(num):
    time.sleep(1)
    return num ** 2


Каждый класс представляет из себя определенный вид кэша и принимает соответствующие параметры.
SimpleCache() - обычный кэш, который сохраняет уже рассчитанные ключи и отдаёт закжшированный результат. У него нет ограничений по размеру и 
времени хранения информации.

FIFOCache(max_size=10) - First In First Out кэш. Вид кэша, при создании которого задаётся максимально возможный размер кэша. 
Соответственно если нужно добавить новый элемент при достижении лимита, то сначал удаляется самый 
старый элемент (по дате времени добавления в кэш) и после этого добавляется новый.

LRUCache(max_size=128) - Least recently used кэш. Также имеет максимальный размер, но в отличие от FIFO при достижении лимита удаляется самый старый
элемент НЕ по времени добавления, а по времени обращения к этому элементу.

TTLCache(max_size=128, ttl=600) - Time to live кэш. Вариант LRU кэша, только добавляется время жизни записи в кэше (задаётся в секундах) и соответственно
кроме времени последнего обращения к элементу анализируется и срок жизни.




ЗАДАЧА 2
Написать программу для учёта товаров на складе. Программа должна иметь консольный интерфейс для взаимодействия с пользователем.
Техническое задание:
При запуске программы у пользователя должны быть следующие функции (назовём их кнопками, только в консоли):
1. Создать категорию товаров. Для этого у пользователя запрашиваются:
a) Название категории (Например Smartphone)
б) Допустимые параметры: (Например: name, price, color, screen_size, cameras_num)

Далее у вас должно быть постоянное хранилище для списка категорий (например файл json), в который сохраняется 
категория и её параметры, которые ввёл пользователь. Если такая категория уже существует, то надо пользователю
сообщить об этом.

2. Добавить новый товар. Для этого у пользователя запрашиваются
а) Категория товара (например: Smartphone),
б) Все параметры которые есть у этого товара.
в) Количество единиц данного товара, которое прибыло на склад

Далее у вас должно быть постоянное хранилище для товаров (например тоже json файл или csv файл),
в который сохранеятся товар и все его параметры, а также идентификатор, который соответствует порядку добавления в хранилице, A
также добавляются два параметра created_at - время добавления записи, updated_at - время последнего обновления (изначально равно created_at)
При этом если такой товар уже существует с такими же параметрами, то мы просто обновляем его количество и updated_at, если нет, то создаём 
новую запись.

Например
{
    "Goods": [
        {
            "id": 0,
            "name": "Iphone 14 PRO",
            "category": "Smartphone",
            "color": "red",
            "price": 1500,
            ....
            "quantity": 10,
            "created_at": <timestamp>,
            "upated_at": <timestamp>,
        },
        {
            "id": 1,
            "name" "Iphone 14 PRO",
            "color": "black",
            "price": 1600,
            ...
            "quantity": 1,
            "created_at": <timestamp>,
            "upated_at": <timestamp>,
        },
        ...
    ]
}


3. Получить список всех товаров на складе:
У пользователя запрашивается 
a) название категории, например "Smartphone" (Также сделать так, чтобы если он ничего не вводит, то это
считалось как получить все категории)
б) минимальная дата добавления (Например: 2023-03-12)
в) максимальная дата добавления (Например: 2023-03-14)
Также даты могут быть пустыми, это значит что пользователь не хочет ограничивать одну из дат, а хочет получить записи
за всё время.

В результате на экран должны вывестись айдишники и названия товаров, которые соответствуют параметрам поиска.


4. Получить конкретный товар:
У пользователя запрашивается id товара и в ответ возвращается информация об этом товаре, а также то можно ли его
купить или нет.


5. Совершить заказ
У пользователя запрашиваются список id товаров и количество каждого, которые хочет кто-то купить, после этого в файле с товарами идёт поиск этих товаров И
проверяется наличие. Если все товары есть, то возвращается заказ со всеми нужными товарами и итоговая цена. Также соответственно уменьшаются количества 
товаров в файле со списком товаров. 
Кроме того у вас должен быть отдельный json файл для хранения заказов, в котором вы храните id заказа, список id товаров купленных и их количество, 
итоговая цена заказа, а также поле created_at, которое хранит время создания заказа.


6. Получить статистику
У пользователя запрашивают минимальную и максимальную даты (также значения могут быть пустыми).
Программа формирует excel file, который должен содержать несколько листов (имеются ввиду листы в excel)

а) На первом листе должны выводиться: список всех категорий, а также количество проданных товаров за период для каждой категории,
а также сумму денег, которую принесло это

б) На втором листе должнен выводиться список всех товаров, а также количество проданных единиц за выбранный период.

в) На третьем листе должен выводиться список заказов, отсортированный от заказа с наибольшим чеком до наименьшего.

г) На четвёртом листе должны выводиться метрики: общая выручка за выбранный период, общее количество товаров, самая популярная категория,
самый популярный товар.

