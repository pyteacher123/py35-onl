ЗАДАНИЕ 1
Создайте функцию, которая принимает множество имён, а
возвращает строку описывающая количество лайков (как в Facebook).
Пример вывода:
[] – ‘no one likes this’
["Ann"] -> "Ann likes this"
["Ann", "Alex"] -> "Ann and Alex like this"
["Ann", "Alex", "Mark"] -> "Ann, Alex and Mark like this"
["Ann", "Alex", "Mark", "Max"] -> "Ann, Alex and 2 others like this"


ЗАДАНИЕ 2
В классическом варианте игра рассчитана на двух игроков. 
Каждый из игроков задумывает и записывает тайное 4-значное число с 
неповторяющимися цифрами. Игрок, который начинает игру по жребию, 
делает первую попытку отгадать число. Попытка — это 4-значное число с 
неповторяющимися цифрами, сообщаемое противнику. Противник сообщает 
в ответ, сколько цифр угадано без совпадения с их позициями в тайном 
числе (то есть количество коров) и сколько угадано вплоть до позиции 
в тайном числе (то есть количество быков).
При игре против компьютера игрок вводит комбинации одну за другой, 
пока не отгадает всю последовательность.
Ваша задача реализовать программу, против которой можно сыграть в "Быки и коровы"
Пример
Загадано число 3219
>>> 2310
Две коровы, один бык
>>> 3219
Вы выиграли!


ЗАДАНИЕ 3
Написать программу для валидации банковских карт. 
Пользователь должен вводить в консоли номер банковской карты, 
программа должна проверять является ли она валидной, 
а также определять её параметры (платежная система, номер банка-эмитента) 
и сохранять их в словарь. После каждой попытки спрашивать пользователя о том, 
хочет ли он проверить ещё одну карту или завершить сеанс. 
При выборе завершения сеанса происходит выход из программы.
Условия валидности карты:
1. Карта содержит только 16 символов.
2. Все символы являются цифрами.
3. Первая цифра равна 4 – Visa или 5 – Mastercard
4. Номер карты соответствует алгоритму Луна
Варианты вывода программы:
1.	Ошибка при валидации:
{
     ‘success’: False,
     ‘description’: ‘Почему не прошла валидация’
}
# 4808 4957 4838 8383
2.	Успешно обработалось:
{
    ‘success’: True,
    ‘payment_gate’: ‘Visa’,
    ‘bank_code’: ‘80849’
}



ЗАДАНИЕ
Написать функцию is_right_angle_triangle(a, b, c), которая принимает на вход 3 числа, 
которые записываются в три переменные a, b, c.
При этом самое большое число попадает в переменную c, самое маленькое в переменную a, среднее в переменную b. 
Функция должна:
1. Проверить может ли существовать треугольник с такими сторонами
(сумма любых двух сторон должна быть БОЛЬШЕ третьей)
2. Если треугольник не может существовать функция возвращает словарь
{
    'result': False,
    'description': 'no such triangle exists'
}
3. Если треугольник может существовать, то функция проверяет является ли
треугольник прямоугольным (сумма квадратов меньших сторон (катетов) должна равняться
квадрату наибольшой стороны (гипотенузы))
4. Если треугольник не явяляется прямоугольным, то функция возвращает  словарь
{
    'result': False,
    'description': 'the triangle is not right-angled'
}
5. A если является, то возвращает словарь
{
    'result': True,
    'description': 'the triangle is right-angled'
}

Примеры использования:
result = is_right_angle_triangle(3, 4, 5)
print(result) 
# {
#    'result': True,
#    'description': 'the triangle is right-angled'
# } 
# так как из этих чисел можно собрать 
# прямоугольный треугольник (3, 4 - катеты, 5 - гпотенуза)

result = is_right_angle_triangle(3, 5, 9)
print(result) 
# {
#    'result': False,
#    'description': 'no such triangle exists'
# } 
# так как из этих чисел нельзя собрать треугольник

result = is_right_angle_triangle(11, 11, 21)
print(result) 
# {
#    'result': False,
#    'description': 'the triangle is not right-angled'
# } 
# так как из этих чисел можно собрать треугольник, но
# но не прямоугольный.