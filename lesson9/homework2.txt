ЗАДАНИЕ
Создать программу с консольным интерфейсом, с помощью которой
пользователь смог бы просматривать котировки акций компаний из
рейтинга sp500: производить поиск по базе компаний, выводить рейтинг,
получать среднюю стоимость котировок.

Для этого в текущей папке вы можете найти файл sp500.csv, в котором хранится
информация по компаниям из рейтинга sp500. Этот файл нужно использовать в качестве
базы данных для нашей программы.

Принцип работы программы:
Пользователь запускает программу в терминале и ему выдаётся меню из 5 пунктов:
1 - Find info by name
2 - Get all companies by sector
3 - Calculate average price
4 - Get top 10 companies
5 - Exit
Your choice:

Пользователь с клавиатуры вводит число, которое интерпритируется программой, как кнопка в меню.
Как мы видим программа должна предоставлять 5 действий.
Под каждое действие вам нужно в коде реализовать функцию на питоне.

1) Find info by name - если пользователь выбрал этот пункт, то программа должна запросить у пользователя
ввод названия компании, которую он ищет. 
Когда пользователь ввёл название компании, то программа осуществляет поиск в файле sp500.csv по полю Name и
записывает в список информацию о компаниях, в названиях которых встречается введённая пользователем строка.
Заметьте что компаний в результате может быть больше одной или не быть вовсе, так как нужно искать не только точные сопадения, но И
названия которые просто содержат введённую строку, но не совпадают с ней полностью
Например:
Если пользователь ввёл строку micro, то в результате должен вернуться список с информацией о следующих компаниях: Microsoft Corp., Microchip Technology,
Micron Technology
Информацию о каждой компании записывать ввиде словаря.
В результате программа должна вывести на экран список со всеми найденными компаниями.

ПРИМЕР:
Choose the action from menu
1 - Find info by name
2 - Find info by symbol
3 - Get all companies by sector
4 - Calculate average price
5 - Get top 10 companies
6 - Exit
Your choice: 1
Enter the name of company: Microsof
[{'Name': 'Microsoft corp.', 'Symbol': 'MSFT', 'Sector': 'Information Technology', 'Stock price': 85.01}]

2) Get all companies by sector - если пользователь выбрал этот пункт, то программа должна запросить у пользователя
ввод названия сектора, которым он интересуется. Например: information Technology
В ответ программа должна вернуть список из названий всех компаний, которые работают в этом секторе.
Для этого вам нужно реализовать поиск в файле sp500.csv по полю sector.
Пример вывода:
["Microsoft", "Apple", ...]
вместо точек продолжение списка. 

3) Calculate average price - если пользователь выбрал этот пункт, то ничего дополнительно запрашивать не нужно,
нужно просто посчитать среднюю цену акций всех компаний в списке и напечатать её в консоли для пользователя.

4) Get top 10 companies - если пользователь выбрал этот пункт, то ничего дополнительно запрашивать не нужно, нужно
составить список из 10 компаний с самыми дорогими акциями и напечатать этот список на экран
Элементы списка должны быть в формате tuple ("Название компании", "цена акций") и расположены от большего к меньшему.
ПРИМЕР (данные взяты не из файла, а из головы для примера):
[("Microsoft", 100), ("Apple", 95), ("Some Company", 94), ...] 

5) Exit - если пользователь выбрал этот пункт, то программа пишет в консоли "GOODBYE" и заканчивает свою работу.


ЗАДАНИЕ 2
Для предыдущей программы реализовать функцию кэша (cache)
Кэш — промежуточный буфер с быстрым доступом к нему, содержащий информацию, которая может быть запрошена с наибольшей вероятностью.
Иными словами это хранилище, обычно в оперативной памяти компьютера, в котором можно сохранять уже рассчитанные 
результаты работы какой-то части программы или алгоритма, тем самым избегая повторных вычислений в прошлые разы.
Например представим, что в первом задании пользователь запустил поиск по списку компаний и ввёл слово "micro",
далее программа должна передать введённую строку какой-то функции, а уже внутри функции открыть файл sp500.csv, произвести поиск по нему,
конвертировать найденные результаты в словарь, сформировать результирующий список из словарей и, наконец, напечатать его на экран.

А теперь прдеставим, что пользователь после этого захотел снова осуществить поиск по строке "micro". Да, мы можем запустить весь алгоритм ещё раз,
но зачем, ведь мы уже посчитали результат поиска для запроса "micro" в предыдущий раз, и этот раз результат будет такой же, потому что наш файл не
меняется, он хранит статичную информацию. Как раз здесь мы могли бы ускорить нашу программу с помощью системы кэша.
Например для реализации кэша подошёл бы словарь, где ключом будет запрос, который пользователь уже вводил, а значением будет результат этого запроса,
то есть список который сформировала функция.
Попробуйте реализовать кжш с помощью паттерна декоратор и применить его для функций, которые вы написали в первом задание. 